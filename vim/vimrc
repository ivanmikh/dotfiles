" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

runtime! ftplugin/man.vim
" No Vi compatibility
set nocompatible

let mapleader = ";"

" Always wait for commands
" set timeoutlen=500

" Save edit history
set undofile
set undodir=~/.vim/undo/

" Directory for .swap files
set directory=~/.vim/swap/

" Swap file update time 
set updatetime=1000
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Plugins
" Plug 'sheerun/vim-polyglot'
Plug 'Konfekt/FastFold'
Plug 'Valloric/YouCompleteMe'
Plug 'airblade/vim-gitgutter'
Plug 'davidhalter/jedi-vim'
Plug 'ericcurtin/CurtineIncSw.vim'
Plug 'gauteh/vim-cppman'
Plug 'junegunn/gv.vim'
Plug 'majutsushi/tagbar'
Plug 'preservim/nerdtree'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Initialize plugin system
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Terminal

" 256-color terminal
set t_Co=256

" Fast terminal connection
set ttyfast

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Movement

" Move vertically by visual line
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk

" Move to beginning/end of line
nmap <Home> ^
nmap <End> $

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clipboard 

" Use system clipboard
" set clipboard=unnamed

" Leave contents of system clipboard on exit
autocmd VimLeave * call system("xclip -sel clip", getreg('+'))

" copy selection to system clipboard
vnoremap +p "+p
vnoremap +y "+y
vnoremap +d "+d

" paste from system clipboard
nnoremap +p "+p
nnoremap +y "+y
nnoremap +d "+d

" copy filepath to system clipboard
nmap <leader>cp :let @+ = expand("%:p:a")<cr>

" paste/delete without yanking selected
vnoremap p "_dP
nnoremap x "_x
vnoremap x "_x

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" keys and spaces

" fix backspace
set bs=indent,eol,start

" wrap on pressing bs, space or arrows
set whichwrap=<,>,[,],b,s

" number of lines to show around the cursor
set scrolloff=10
" show tabs and trailing spaces
set list
set listchars=tab:‚Üí\ ,eol:¬¨,space:¬∑,trail:-,extends:‚ùØ,precedes:‚ùÆ
set showbreak=‚Ü™

" tab control
set expandtab               " insert tabs rather than spaces for <tab>
set smarttab                " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4               " the visible width of tabs
set softtabstop=4           " edit as if the tabs are 4 characters wide
set shiftwidth=4            " number of spaces to use for indent and unindent
set shiftround              " round indent to a multiple of 'shiftwidth'
set completeopt+=menu,noselect

set cindent

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" theme and view

" show partial command keys
set showcmd

" set colorscheme
colorscheme wombat256

" tab colors
hi tabline ctermfg=grey
hi tablinesel ctermfg=white

set termguicolors

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" search

"" recursive search
"set path+=**

" nice way to show search results
set wildmenu

" the following are commented out as they cause vim to behave a lot
" differently from regular vi. they are highly recommended though.
set showmatch       " show matching brackets.
set ignorecase      " do case insensitive matching
set smartcase       " do smart case matching
set incsearch       " incremental search
set autowrite       " automatically save before commands like :next and :make
set mouse=a         " enable mouse usage (all modes)

set number
set relativenumber
" highlight linenr term=bold cterm=none ctermfg=darkgrey ctermbg=none gui=none guifg=darkgrey guibg=none

set nohlsearch
" Toggle hlsearch
noremap <leader>hh :set hlsearch! hlsearch?<CR>
" search in selected text
vnoremap <leader>/ <esc>/\%v
" search selected text
vnoremap <leader>* y/\V<C-R>=escape(@",'/\')<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CScope

if has('cscope')
  set cscopetag
  set nocscopeverbose

  if has('quickfix')
     set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  cnoreabbrev csa cs add
  cnoreabbrev csf cs find
  cnoreabbrev csk cs kill
  cnoreabbrev csr cs reset
  cnoreabbrev css cs show
  cnoreabbrev csh cs help
 
  source ~/.vim/autoload/cscope_maps.vim

  " if filereadable("cscope.out")
  "   cs add cscope.out
  " endif
  function! LoadCscope()
    let db = findfile("cscope.out", ".;")
    if (!empty(db))
      let path = strpart(db, 0, match(db, "/cscope.out$"))
      set nocscopeverbose " suppress 'duplicate connection' error
      exe "cs add " . db . " " . path
      set cscopeverbose
    " else add the database pointed to by environment variable 
    elseif $CSCOPE_DB != "" 
      cs add $CSCOPE_DB
    endif
  endfunction
  au BufEnter /* call LoadCscope()
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Splits

" Alt tab windows
" map T <C-W>w
map H <C-W>h
map L <C-W>l
" Map shift+arrows to change windows
map [1;2A <C-W>k
map [1;2B <C-W>j
map [1;2C <C-W>l
map [1;2D <C-W>h

" Open new split panes to right and bottom
set splitbelow
set splitright

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Buffers

" Close buffer and keep split
set hidden
"nnoremap <c-c> :bp\|bd #<CR>
nnoremap <c-c> :bp<cr>:bd #<cr>
nnoremap <C-N> :bn<CR>
nnoremap <C-P> :bp<CR>
nnoremap gb :ls<CR>:b<space>
nnoremap gvb :ls<CR>:vert sb<space>
nnoremap gsb :ls<CR>:sb<space>

" MiniBufExplorer
"hi MBENormal               ctermfg=darkgrey guibg=fg
"hi MBEChanged              ctermfg=grey     guibg=fg
"hi MBEVisibleNormal        ctermfg=darkgrey guibg=fg
"hi MBEVisibleChanged       ctermfg=grey     guibg=fg
"hi MBEVisibleActiveNormal  ctermfg=cyan     guibg=fg
"hi MBEVisibleActiveChanged ctermfg=magenta  guibg=fg
"let g:miniBufExplMapWindowNavVim = 1 
"let g:miniBufExplMapWindowNavArrows = 1 
"let g:miniBufExplMapCTabSwitchBufs = 1 
"let g:miniBufExplModSelTarget = 1 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Opening a file

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd") && (! &diff)
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

set autoread
filetype plugin on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Nerd Tree

" Toggle NERDTree file browser
map <F2> :NERDTreeToggle <CR>
let NERDTreeMinimalUI  = 0
let NERDTreeQuitOnOpen = 0
" Close NERDTree if it is the only buffer left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagBar

" Toggle Tags List
map <F3> :TagbarToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding

set foldmethod=manual
set foldnestmax=10
set nofoldenable
set foldlevelstart=10

" create fold for matching brace
nnoremap <Leader>f V%zf

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
" au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=undercurl guisp=Magenta
" au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 gui=bold,reverse
" set laststatus=2           " enable status line always
" set statusline=[%n]        " Buffer number
" set statusline+=\          " Insert space
" set statusline+=CF:%F      " Path to the file
" set statusline+=\          " Insert space
" set statusline+=%r         " Read only flag
" set statusline+=%9*\       " Gap
" set statusline+=%9*CWD:    " Print "CWD"
" set statusline+=%9*%{getcwd()} " Current working directory
" set statusline+=%9*%=      " Switch to the right side
" set statusline+=\ \        " Gap
" set statusline+=%9*%m      " Modified
" set statusline+=\ \        " Insert space
" set statusline+=%9*%P         " Percentage
" set statusline+=\ \        " Gap
" set statusline+=%l:%c      " Current line : column
" set statusline+=/          " Separator
" set statusline+=%L         " Total lines

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_section_x = "%{getcwd()}"
let g:airline_section_y = ''
" let g:airline_section_c = '%f'
let g:airline#extensions#whitespace#enabled = 0
let g:airline_theme='minimalist'
let g:airline_minimalist_showmod = 0
let g:airline#extensions#tabline#fnamemod = ':t'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Source files navigation

" Switch header/source
map <F4> :call CurtineIncSw()<CR>

" Switch declaration/definition
map <F5> viwy<F4>/<C-R>*<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Editing
" Save file
nnoremap <Esc><Esc> <Esc>:w<CR>
" Space in normal mode
nnoremap <space> i<space><esc>l

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe

let g:ycm_always_populate_location_list = 1
let g:ycm_global_ycm_extra_conf='/home/ivan/Documents/dotfiles/vim/ycm_extra_conf.py'
let g:ycm_warning_symbol = '..'
let g:ycm_error_symbol = '>>'

highlight clear YcmWarningSign
highlight clear YcmWarningLine
highlight clear YcmWarningSection
highlight clear YcmErrorSign
highlight clear YcmErrorLine
highlight clear YcmErrorSection
highlight YcmWarningSign ctermfg=Cyan guifg=Cyan

let g:ycm_add_preview_to_completeopt=0
set completeopt-=preview

" Disable YCM for vimdiff
if &diff
  let g:loaded_youcompleteme = 1
endif

" Do not ask about conf loading
let g:ycm_confirm_extra_conf = 0

let g:clang_library_path='/usr/lib/x86_64-linux-gnu'
let g:ycm_server_python_interpreter='/usr/bin/python3'

command! GoToDec YcmCompleter GoToDeclaration
command! GoToDef YcmCompleter GoToDefinition

nnoremap <leader>d :YcmCompleter GoTo<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Python

let g:jedi#completions_enabled = 1
let g:deoplete#sources#jedi#enable_typeinfo = 1
let g:jedi#popup_on_dot = 1
let g:jedi#auto_initialization = 1
let g:polyglot_disabled = ['python']

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GitGutter

" let g:gitgutter_set_sign_backgrounds = 1
highlight GitGutterAdd    guifg=#d2d2d2 ctermfg=2
highlight GitGutterChange guifg=#d2d2d2 ctermfg=3
highlight GitGutterDelete guifg=#d2d2d2 ctermfg=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc

autocmd FileType c   setlocal commentstring=/*\ %s\ */
autocmd FileType cpp setlocal commentstring=/*\ %s\ */

" Scroll bind horiz
set scrollopt=hor,ver,jump
" Block Ctrl-Z
nnoremap <c-z> :echo "Type quit to exit Vim"<CR>

" echo filepath
nnoremap <leader>cfp :let @+=expand("%:p")<CR>
nnoremap <leader>cfn :let @+=expand("%")<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo.
command! W w !sudo tee > /dev/null %

" Quit without saving
command! Q q!

" Disable search highlight
nnoremap <leader>h :nohlsearch<CR>

" Run current file
command! ShellRun :! ./% 

" Compile and run
command! GccRun :!g++ -Wall -Wextra -std=c++17 -g3 $(pkg-config --cflags glib-2.0 gio-2.0) % $(pkg-config --libs glib-2.0 gio-2.0) && ./a.out
command! GccRun32 :!g++ -Wall -Wextra -std=c++17 -m32 -g3 % && ./a.out

