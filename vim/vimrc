" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

runtime! ftplugin/man.vim
" No Vi compatibility
set nocompatible

let mapleader = ";"

" Always wait for commands
" set timeoutlen=500

" Save edit history
set undofile
if has("nvim")
  set undodir=~/.vim/files/undo/nvim
else
  set undodir=~/.vim/files/undo/vim
endif

" Directory for .swap files
set directory=~/.vim/files/swap/

" Enable file backup
set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =

" Set update count
set updatecount =100

" Enable viminfo
if has("nvim")
  set viminfo     ='100,n$HOME/.vim/files/info/nviminfo
else
  set viminfo     ='100,n$HOME/.vim/files/info/viminfo
endif

" Update time 
set updatetime=500

" Hide --INSERT--
set noshowmode

" Show .h files properly
set suffixes-=.h

" Give more space for displaying messages.
set cmdheight=1

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Always show statusline
set laststatus=2

" Search for tags recursively
set tags=./tags;

" Look for local vimrc
set exrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Plugins

""" LSP
if has("nvim")
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
endif
Plug 'majutsushi/tagbar'

""" All hail tpope
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'

""" Status bar
Plug 'itchyny/lightline.vim'

""" Git
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/gv.vim'
Plug 'tpope/vim-fugitive'

""" Tmux
Plug 'christoomey/vim-tmux-navigator'

" Initialize plugin system
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Terminal

" 256-color terminal
set t_Co=256

" Fast terminal connection
set ttyfast

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Movement

" Move vertically by visual line
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk

vnoremap j gj
vnoremap k gk
vnoremap <down> gj
vnoremap <up> gk

" Move to beginning/end of line
nmap <Home> ^
nmap <End> $

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clipboard 

" Use system clipboard
"set clipboard=unnamedplus

" Leave contents of system clipboard on exit
"autocmd VimLeave * call system("xclip -sel clip", getreg('+'))

" Copy filepath (:linenumber)
command! -nargs=0 CopyFp  :let @+=expand("%":p)
command! -nargs=0 CopyFn  :let @+=expand("%")
command! -nargs=0 CopyFnLn :let @+=expand("%") . ':' . line(".")

" copy selection to system clipboard
vnoremap <Enter> "+y
vnoremap +y "+y
nnoremap +y "+y
vnoremap +d "+d
nnoremap +d "+d

" paste from system clipboard
nnoremap +p "+p
vnoremap +p "+p
nnoremap +P "+P
vnoremap +P "+P

" copy filepath to system clipboard
nmap <leader>cp :let @+ = expand("%:p:a")<cr>

" paste/delete without yanking selected
"vnoremap p "_dP
"nnoremap x "_x
"vnoremap x "_x

" Make shifts keep selection
vnoremap < <gv
vnoremap > >gv

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tabs and spaces

" fix backspace
set bs=indent,eol,start

" wrap on pressing bs, space or arrows
set whichwrap=<,>,[,]

" number of lines to show around the cursor
set scrolloff=5
" show tabs and trailing spaces
set list
set listchars=tab:‚Üí\ ,eol:¬¨,space:¬∑,trail:-,extends:‚ùØ,precedes:‚ùÆ
set showbreak=‚Ü™

" tab control
set expandtab               " insert spaces rather than tabs for <tab>
set smarttab                " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4               " the visible width of tabs
set softtabstop=4           " edit as if the tabs are 4 characters wide
set shiftwidth=4            " number of spaces to use for indent and unindent
set shiftround              " round indent to a multiple of 'shiftwidth'
set completeopt+=menu,noselect

set cindent

command SetTab :set expandtab | :set smarttab | :set tabstop=4 | :set softtabstop=4 | :set shiftwidth=4 | :set shiftround

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" theme and view

" show partial command keys
set showcmd

" set colorscheme
colorscheme wombat256

set termguicolors

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Search

"" recursive search
set path+=**

" nice way to show search results
set wildmenu

" show search count
set shortmess=filnxtToOFc

" the following are commented out as they cause vim to behave a lot
" differently from regular vi. they are highly recommended though.
set showmatch       " show matching brackets.
set ignorecase      " do case insensitive matching
set smartcase       " do smart case matching
set incsearch       " incremental search
set autowrite       " automatically save before commands like :next and :make
set mouse=a         " enable mouse usage (all modes)

set number
"set relativenumber
" highlight linenr term=bold cterm=none ctermfg=darkgrey ctermbg=none gui=none guifg=darkgrey guibg=none

set nohlsearch

" search selected text
vnoremap * y/\V<C-R>=escape(@",'/\')<CR><CR>
vnoremap # y/\V<C-R>=escape(@",'/\')<CR><CR>

command! -nargs=0 F :FZF

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Splits

" Alt tab windows
"map T <C-W>w
"map H <C-W>h
"map L <C-W>l
" Map shift+arrows to change windows
map [1;2A <C-W>k
map [1;2B <C-W>j
map [1;2C <C-W>l
map [1;2D <C-W>h

" Open new split panes to right and bottom
set splitbelow
set splitright

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs

nnoremap [t :tabprevious<CR>
nnoremap ]t :tabnext<CR>
nnoremap [T :tabfirst<CR>
nnoremap ]T :tablast<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Buffers

" Close buffer and keep split
set hidden
"nnoremap <c-c> :bp\|bd #<CR>
"nnoremap <c-c> :bp<cr>:bd #<cr>
nnoremap gb :ls<CR>:b<space>
nnoremap gvb :ls<CR>:vert sb<space>
nnoremap gsb :ls<CR>:sb<space>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Opening a file

" Jump to the last position when reopening a file
if has("autocmd") && (! &diff)
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Load indentation rules and plugins according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

set autoread
filetype plugin on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagBar

" Toggle Tags List
command! Tag :TagbarOpenAutoClose

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding

set foldmethod=manual
set foldnestmax=10
set nofoldenable
set foldlevelstart=10

" create fold for matching brace
nnoremap <Leader>f V%zf

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Lightline
let g:lightline = {
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'absolutepath', 'readonly',  'cocstatus', 'filename', 'modified' ] ],
  \   'right': [ [ 'lineinfo' ],
  \              [ 'gitbranch', 'fileformat', 'fileencoding', 'filetype' ] ]
  \ },
  \ 'colorscheme': 'wombat',
  \ 'component': {
  \   'lineinfo': '%3l:%-2c/%3L',
  \ },
  \ 'component_function': {
  \   'cocstatus': 'coc#status',
  \   'gitbranch': 'FugitiveHead',
  \   'cwd'      : 'LightLineCwd'
  \ },
\ }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Editing

" Save file
nnoremap <Esc><Esc> <Esc>:w<CR>
" Space in normal mode
nnoremap <space> i<space><esc>l

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Editorconfig

"let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*', '.git']
"au FileType gitcommit let b:EditorConfig_disable = 1
"au FileType fugitive let b:EditorConfig_disable = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Termdebug
packadd termdebug

" let g:termdebugger = "gdb-multiarch"
" C(++) debugging
" See https://neovim.io/doc/user/nvim_terminal_emulator.html
" For a nice split window view
let g:termdebug_popup = 0
let g:termdebug_wide = 1
" Map ESC to exit terminal mode
tnoremap <Esc> <C-\><C-n>
nnoremap <silent> <leader>b :Break<CR>
nnoremap <silent> <leader>bc :Clear<CR>
nnoremap <silent> <leader>c :Continue<CR>
" map ,w :call TermDebugSendCommand('where')<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COC
" Some servers have issues with backup files, see #649.
"set nobackup
"set nowritebackup

if has("nvim")

  if &diff
    let b:coc_enabled = 0
  endif

  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved.
  if has("patch-8.1.1564")
    " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
  else
    set signcolumn=yes
  endif

  let b:coc_root_patterns = ['.git', '.svn', '.vim']

  " Make <cr> select the first completion item and confirm the completion when no item has been selected
  inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

  " use <tab> to trigger completion and navigate to the next complete item
  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " use <tab> and <s-tab> to navigate the completion list
  inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
  inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

  " Use <c-space> to trigger completion.
  inoremap <c-space> coc#refresh()

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap [g <Plug>(coc-diagnostic-prev)
  nmap ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap gd <Plug>(coc-definition)
  nmap gy <Plug>(coc-type-definition)
  nmap gi <Plug>(coc-implementation)
  nmap gr <Plug>(coc-references)
  nmap gh :CocCommand clangd.switchSourceHeader<CR>

  " Apply quick fix
  nmap <leader>qf <Plug>(coc-fix-current)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call ShowDocumentation()<CR>

  function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold  * silent call CocActionAsync('highlight')
  "autocmd CursorHoldI * silent call CocActionAsync('showSignatureHelp')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)
  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocAction('format')

  " Add `:Fold` command to fold current buffer.
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

endif "if has nvim

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
let g:EditorConfig_verbose = 1
" Sleuth
let g:sleuth_automatic = 0
" Netrw
nmap - :Explore<CR>
let g:netrw_sort_sequence = "[\/]$,[.cpp.c.h]$"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc

autocmd FileType c   setlocal commentstring=/*\ %s\ */
autocmd FileType cpp setlocal commentstring=/*\ %s\ */

" local vimrc
silent! so .vimlocal

" Scroll bind horiz
set scrollopt=hor,ver,jump

" Block Ctrl-Z
nnoremap <c-z> :echo "Type quit to exit Vim"<CR>

" Quit without saving
command! Q qa!

" Run current file
command! ShellRun :! ./% 

" Compile and run
command! GccRun :!gcc -Wall -Wextra -std=c11 -ggdb
    \ %
    \ && time ./a.out

command! GppRun :!g++ -Wall -Wextra -std=c++17 -ggdb
    \ %
    \ && time ./a.out

command! GccRun32 :!gcc -Wall -Wextra -std=c++17 -m32 -ggdb % && time ./a.out

