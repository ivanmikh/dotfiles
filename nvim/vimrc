" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

runtime! ftplugin/man.vim
" No Vi compatibility
set nocompatible

let mapleader = ";"

" Always wait for commands
" set timeoutlen=500

" Save edit history
set undofile
set undodir=~/.vim/undo/

" Directory for .swap files
set directory=~/.vim/swap/

" Update time 
set updatetime=500

" Hide --INSERT--
set noshowmode

" Show .h files properly
set suffixes-=.h

" Give more space for displaying messages.
set cmdheight=2

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Always show statusline
set laststatus=2
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Plugins

""" LSP
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'jackguo380/vim-lsp-cxx-highlight'
Plug 'vim-syntastic/syntastic'

""" Navigation
Plug 'ericcurtin/CurtineIncSw.vim'
Plug 'gauteh/vim-cppman'
Plug 'majutsushi/tagbar'

""" Editing
Plug 'editorconfig/editorconfig-vim'
Plug 'embear/vim-localvimrc'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

""" Status bar
Plug 'itchyny/lightline.vim'

""" Git
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/gv.vim'
Plug 'tpope/vim-fugitive'

Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug '/usr/bin/fzf'
Plug 'tpope/vim-repeat'

" Initialize plugin system
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Terminal

" 256-color terminal
set t_Co=256

" Fast terminal connection
set ttyfast

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Movement

" Move vertically by visual line
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk

" Move to beginning/end of line
nmap <Home> ^
nmap <End> $

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clipboard 

" Use system clipboard
set clipboard=unnamedplus

" Leave contents of system clipboard on exit
"autocmd VimLeave * call system("xclip -sel clip", getreg('+'))

" copy selection to system clipboard
vnoremap <Enter> "+y
vnoremap +y "+y
nnoremap +y "+y
vnoremap +d "+d
nnoremap +d "+d

" paste from system clipboard
nnoremap +p "+p
vnoremap +p "+p
nnoremap +P "+P
vnoremap +P "+P

" copy filepath to system clipboard
nmap <leader>cp :let @+ = expand("%:p:a")<cr>

" paste/delete without yanking selected
vnoremap p "_dP
nnoremap x "_x
vnoremap x "_x

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tabs and spaces

" fix backspace
set bs=indent,eol,start

" wrap on pressing bs, space or arrows
set whichwrap=<,>,[,]

" number of lines to show around the cursor
set scrolloff=5
" show tabs and trailing spaces
set list
set listchars=tab:‚Üí\ ,eol:¬¨,space:¬∑,trail:-,extends:‚ùØ,precedes:‚ùÆ
set showbreak=‚Ü™

" tab control
set expandtab               " insert tabs rather than spaces for <tab>
set smarttab                " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4               " the visible width of tabs
set softtabstop=4           " edit as if the tabs are 4 characters wide
set shiftwidth=4            " number of spaces to use for indent and unindent
set shiftround              " round indent to a multiple of 'shiftwidth'
set completeopt+=menu,noselect

set cindent

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" theme and view

" show partial command keys
set showcmd

" set colorscheme
colorscheme wombat256

set termguicolors

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Search

"" recursive search
set path+=**

" nice way to show search results
set wildmenu

" the following are commented out as they cause vim to behave a lot
" differently from regular vi. they are highly recommended though.
set showmatch       " show matching brackets.
set ignorecase      " do case insensitive matching
set smartcase       " do smart case matching
set incsearch       " incremental search
set autowrite       " automatically save before commands like :next and :make
set mouse=a         " enable mouse usage (all modes)

set number
set relativenumber
" highlight linenr term=bold cterm=none ctermfg=darkgrey ctermbg=none gui=none guifg=darkgrey guibg=none

set nohlsearch

" search selected text
vnoremap * y/\V<C-R>=escape(@",'/\')<CR><CR>
vnoremap # y/\V<C-R>=escape(@",'/\')<CR><CR>

command! -nargs=0 F :FZF

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Splits

" Alt tab windows
"map T <C-W>w
"map H <C-W>h
"map L <C-W>l
" Map shift+arrows to change windows
map [1;2A <C-W>k
map [1;2B <C-W>j
map [1;2C <C-W>l
map [1;2D <C-W>h

" Open new split panes to right and bottom
set splitbelow
set splitright

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs

nnoremap [t :tabprevious<CR>
nnoremap ]t :tabnext<CR>
nnoremap [T :tabfirst<CR>
nnoremap ]T :tablast<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Buffers

" Close buffer and keep split
set hidden
"nnoremap <c-c> :bp\|bd #<CR>
"nnoremap <c-c> :bp<cr>:bd #<cr>
nnoremap gb :ls<CR>:b<space>
nnoremap gvb :ls<CR>:vert sb<space>
nnoremap gsb :ls<CR>:sb<space>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Opening a file

" Jump to the last position when reopening a file
if has("autocmd") && (! &diff)
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Load indentation rules and plugins according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

set autoread
filetype plugin on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagBar

" Toggle Tags List
map <F3> :TagbarOpenAutoClose<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding

set foldmethod=manual
set foldnestmax=10
set nofoldenable
set foldlevelstart=10

" create fold for matching brace
nnoremap <Leader>f V%zf

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Lightline
let g:lightline = {
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'absolutepath', 'readonly',  'cocstatus', 'filename', 'modified' ] ],
  \   'right': [ [ 'lineinfo' ],
  \              [ 'gitbranch', 'fileformat', 'fileencoding', 'filetype' ] ]
  \ },
  \ 'colorscheme': 'wombat',
  \ 'component': {
  \   'lineinfo': '%3l:%-2c/%3L',
  \ },
  \ 'component_function': {
  \   'cocstatus': 'coc#status',
  \   'gitbranch': 'FugitiveHead',
  \   'cwd'      : 'LightLineCwd'
  \ },
\ }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CurtineIncSw

" Switch header/source
map <F4> :call CurtineIncSw()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Editing

" Save file
nnoremap <Esc><Esc> <Esc>:w<CR>
" Space in normal mode
nnoremap <space> i<space><esc>l

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Termdebug
packadd termdebug

" let g:termdebugger = "gdb-multiarch"
" C(++) debugging
" See https://neovim.io/doc/user/nvim_terminal_emulator.html
" For a nice split window view
let g:termdebug_popup = 0
let g:termdebug_wide = 1
" Map ESC to exit terminal mode
tnoremap <Esc> <C-\><C-n>
nnoremap <silent> <leader>b :Break<CR>
nnoremap <silent> <leader>bc :Clear<CR>
nnoremap <silent> <leader>c :Continue<CR>
" map ,w :call TermDebugSendCommand('where')<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" c++ syntax highlighting
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1

" syntastic
let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ "active_filetypes": [],
    \ "passive_filetypes": [] }
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_cpp_checkers = ['clang-format']
let g:syntastic_c_checkers = ['clang-format']
let g:syntastic_python_checkers = ['pylint']
let g:syntastic_sh_checkers = ['shellcheck']
nmap <silent> <leader>sc :SyntasticCheck<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COC
" Some servers have issues with backup files, see #649.
"set nobackup
"set nowritebackup

"let b:coc_enabled = 0

if &diff
    let b:coc_enabled = 0
endif

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

let b:coc_root_patterns = ['.git', '.svn', '.vim']

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold  * silent call CocActionAsync('highlight')
autocmd CursorHoldI * silent call CocActionAsync('showSignatureHelp')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
let g:EditorConfig_verbose = 1
" Sleuth
let g:sleuth_automatic = 0
" Netrw
nmap - :Explore<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc

autocmd FileType c   setlocal commentstring=/*\ %s\ */
autocmd FileType cpp setlocal commentstring=/*\ %s\ */

" local vimrc
silent! so .vimlocal

" Scroll bind horiz
set scrollopt=hor,ver,jump

" Block Ctrl-Z
nnoremap <c-z> :echo "Type quit to exit Vim"<CR>

" Quit without saving
command! Q q!

" Run current file
command! ShellRun :! ./% 

" Compile and run
command! GccRun :!gcc -Wall -Wextra -std=c11 -g3
    \ $(pkg-config --cflags glib-2.0 gio-2.0 gudev-1.0 fwupdplugin libxml-2.0 libudev)
    \ %
    \ $(pkg-config --libs glib-2.0 gio-2.0 gudev-1.0 fwupdplugin libxml-2.0 libudev)
    \ && time ./a.out

command! GppRun :!g++ -Wall -Wextra -std=c++17 -g3
    \ $(pkg-config --cflags glib-2.0 gio-2.0 fwupdplugin)
    \ % $(pkg-config --libs glib-2.0 gio-2.0 fwupdplugin)
    \ && time ./a.out

command! GccRun32 :!gcc -Wall -Wextra -std=c++17 -m32 -g3 % && time ./a.out

